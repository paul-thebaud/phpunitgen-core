<?php

namespace Tests\Feature\Http\Controllers;

use App\Http\Controllers\UserController;
use App\Services\UserService;
use Mockery;
use Mockery\Mock;
use ReflectionClass;
use Tests\TestCase;

/**
 * Class UserControllerTest.
 *
 * @covers \App\Http\Controllers\UserController
 */
final class UserControllerTest extends TestCase
{
    private UserController $userController;

    private UserService|Mock $userService;

    /**
     * {@inheritdoc}
     */
    protected function setUp(): void
    {
        parent::setUp();

        $this->userService = Mockery::mock(UserService::class);
        $this->userController = new UserController($this->userService);
        $this->app->instance(UserController::class, $this->userController);
    }

    /**
     * {@inheritdoc}
     */
    protected function tearDown(): void
    {
        parent::tearDown();

        unset($this->userController);
        unset($this->userService);
    }

    public function testIndex(): void
    {
        /** @todo This test is incomplete. */
        $this->get('/path')
            ->assertStatus(200);
    }

    public function testStore(): void
    {
        /** @todo This test is incomplete. */
        $this->post('/path', [ /* data */ ])
            ->assertStatus(200);
    }

    public function testCreateNewUser(): void
    {
        /** @todo This test is incomplete. */
        $this->get('/path')
            ->assertStatus(200);
    }

    public function testEditUser(): void
    {
        /** @todo This test is incomplete. */
        $this->get('/path')
            ->assertStatus(200);
    }

    public function testUpdateUser(): void
    {
        /** @todo This test is incomplete. */
        $this->put('/path', [ /* data */ ])
            ->assertStatus(200);
    }

    public function testDestroy(): void
    {
        /** @todo This test is incomplete. */
        $this->delete('/path')
            ->assertStatus(200);
    }

    public function testGetUserService(): void
    {
        $expected = Mockery::mock(UserService::class);
        $property = (new ReflectionClass(UserController::class))
            ->getProperty('userService');
        $property->setAccessible(true);
        $property->setValue($this->userController, $expected);
        self::assertSame($expected, $this->userController->getUserService());
    }

    public function testSetUserService(): void
    {
        $expected = Mockery::mock(UserService::class);
        $property = (new ReflectionClass(UserController::class))
            ->getProperty('userService');
        $property->setAccessible(true);
        $this->userController->setUserService($expected);
        self::assertSame($expected, $property->getValue($this->userController));
    }
}
