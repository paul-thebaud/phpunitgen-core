<?php

namespace Tests\Unit\Rules;

use App\Rules\ProductRule;
use App\Services\ProductService;
use Mockery;
use Mockery\Mock;
use ReflectionClass;
use Tests\TestCase;

/**
 * Class ProductRuleTest.
 *
 * @covers \App\Rules\ProductRule
 */
final class ProductRuleTest extends TestCase
{
    private ProductRule $productRule;

    private ProductService|Mock $productService;

    /**
     * {@inheritdoc}
     */
    protected function setUp(): void
    {
        parent::setUp();

        $this->productService = Mockery::mock(ProductService::class);
        $this->productRule = new ProductRule($this->productService);
    }

    /**
     * {@inheritdoc}
     */
    protected function tearDown(): void
    {
        parent::tearDown();

        unset($this->productRule);
        unset($this->productService);
    }

    public function testPassesWhenOk(): void
    {
        /** @todo This test is incomplete. */
        self::assertTrue($this->productRule->passes('attribute', 'valid value'));
    }

    public function testPassesWhenFailed(): void
    {
        /** @todo This test is incomplete. */
        self::assertFalse($this->productRule->passes('attribute', 'invalid value'));
    }

    public function testMessage(): void
    {
        /** @todo This test is incomplete. */
        self::markTestIncomplete();
    }

    public function testGetProductService(): void
    {
        $expected = Mockery::mock(ProductService::class);
        $property = (new ReflectionClass(ProductRule::class))
            ->getProperty('productService');
        $property->setAccessible(true);
        $property->setValue($this->productRule, $expected);
        self::assertSame($expected, $this->productRule->getProductService());
    }

    public function testSetProductService(): void
    {
        $expected = Mockery::mock(ProductService::class);
        $property = (new ReflectionClass(ProductRule::class))
            ->getProperty('productService');
        $property->setAccessible(true);
        $this->productRule->setProductService($expected);
        self::assertSame($expected, $property->getValue($this->productRule));
    }
}
