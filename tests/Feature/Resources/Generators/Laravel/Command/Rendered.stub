<?php

namespace Tests\Feature\Console\Commands;

use App\Console\Commands\PruneUsersCommand;
use App\Services\UserService;
use Mockery;
use Mockery\Mock;
use ReflectionClass;
use Tests\TestCase;

/**
 * Class PruneUsersCommandTest.
 *
 * @covers \App\Console\Commands\PruneUsersCommand
 */
final class PruneUsersCommandTest extends TestCase
{
    private PruneUsersCommand $pruneUsersCommand;

    private UserService|Mock $userService;

    /**
     * {@inheritdoc}
     */
    protected function setUp(): void
    {
        parent::setUp();

        $this->userService = Mockery::mock(UserService::class);
        $this->pruneUsersCommand = new PruneUsersCommand($this->userService);
        $this->app->instance(PruneUsersCommand::class, $this->pruneUsersCommand);
    }

    /**
     * {@inheritdoc}
     */
    protected function tearDown(): void
    {
        parent::tearDown();

        unset($this->pruneUsersCommand);
        unset($this->userService);
    }

    public function testHandle(): void
    {
        /** @todo This test is incomplete. */
        $this->artisan('users:prune')
            ->expectsOutput('Some expected output')
            ->assertExitCode(0);
    }

    public function testGetUserService(): void
    {
        $expected = Mockery::mock(UserService::class);
        $property = (new ReflectionClass(PruneUsersCommand::class))
            ->getProperty('userService');
        $property->setValue($this->pruneUsersCommand, $expected);
        self::assertSame($expected, $this->pruneUsersCommand->getUserService());
    }

    public function testSetUserService(): void
    {
        $expected = Mockery::mock(UserService::class);
        $property = (new ReflectionClass(PruneUsersCommand::class))
            ->getProperty('userService');
        $this->pruneUsersCommand->setUserService($expected);
        self::assertSame($expected, $property->getValue($this->pruneUsersCommand));
    }
}
