<?php

namespace Tests\Unit\Policies;

use App\Policies\ProductPolicy;
use App\Product;
use App\Services\RoleService;
use App\User;
use Mockery;
use Mockery\Mock;
use ReflectionClass;
use Tests\TestCase;

/**
 * Class ProductPolicyTest.
 *
 * @covers \App\Policies\ProductPolicy
 */
final class ProductPolicyTest extends TestCase
{
    private ProductPolicy $productPolicy;

    private RoleService|Mock $roleService;

    private User $user;

    /**
     * {@inheritdoc}
     */
    protected function setUp(): void
    {
        parent::setUp();

        $this->roleService = Mockery::mock(RoleService::class);
        $this->productPolicy = new ProductPolicy($this->roleService);
        $this->user = new User();
        $this->app->instance(ProductPolicy::class, $this->productPolicy);
    }

    /**
     * {@inheritdoc}
     */
    protected function tearDown(): void
    {
        parent::tearDown();

        unset($this->productPolicy);
        unset($this->roleService);
        unset($this->user);
    }

    public function testCreateWhenUnauthorized(): void
    {
        /** @todo This test is incomplete. */
        self::assertFalse($this->user->can('create', [ProductPolicy::class]));
    }

    public function testCreateWhenAuthorized(): void
    {
        /** @todo This test is incomplete. */
        self::assertTrue($this->user->can('create', [ProductPolicy::class]));
    }

    public function testUpdateWhenUnauthorized(): void
    {
        /** @todo This test is incomplete. */
        $product = Mockery::mock(Product::class);

        self::assertFalse($this->user->can('update', $product));
    }

    public function testUpdateWhenAuthorized(): void
    {
        /** @todo This test is incomplete. */
        $product = Mockery::mock(Product::class);

        self::assertTrue($this->user->can('update', $product));
    }

    public function testDeleteWhenUnauthorized(): void
    {
        /** @todo This test is incomplete. */
        $product = Mockery::mock(Product::class);

        self::assertFalse($this->user->can('delete', $product));
    }

    public function testDeleteWhenAuthorized(): void
    {
        /** @todo This test is incomplete. */
        $product = Mockery::mock(Product::class);

        self::assertTrue($this->user->can('delete', $product));
    }

    public function testGetRoleService(): void
    {
        $expected = Mockery::mock(RoleService::class);
        $property = (new ReflectionClass(ProductPolicy::class))
            ->getProperty('roleService');
        $property->setAccessible(true);
        $property->setValue($this->productPolicy, $expected);
        self::assertSame($expected, $this->productPolicy->getRoleService());
    }

    public function testSetRoleService(): void
    {
        $expected = Mockery::mock(RoleService::class);
        $property = (new ReflectionClass(ProductPolicy::class))
            ->getProperty('roleService');
        $property->setAccessible(true);
        $this->productPolicy->setRoleService($expected);
        self::assertSame($expected, $property->getValue($this->productPolicy));
    }
}
