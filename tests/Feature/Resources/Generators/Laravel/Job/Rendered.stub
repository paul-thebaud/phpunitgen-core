<?php

namespace Tests\Unit\Jobs;

use App\Jobs\SendWelcomeMessageJob;
use App\Services\UserService;
use App\User;
use Mockery;
use Mockery\Mock;
use ReflectionClass;
use Tests\TestCase;

/**
 * Class SendWelcomeMessageJobTest.
 *
 * @covers \App\Jobs\SendWelcomeMessageJob
 */
final class SendWelcomeMessageJobTest extends TestCase
{
    private SendWelcomeMessageJob $sendWelcomeMessageJob;

    private User|Mock $user;

    /**
     * {@inheritdoc}
     */
    protected function setUp(): void
    {
        parent::setUp();

        $this->user = Mockery::mock(User::class);
        $this->sendWelcomeMessageJob = new SendWelcomeMessageJob($this->user);
    }

    /**
     * {@inheritdoc}
     */
    protected function tearDown(): void
    {
        parent::tearDown();

        unset($this->sendWelcomeMessageJob);
        unset($this->user);
    }

    public function testHandle(): void
    {
        $userService = Mockery::mock(UserService::class);

        /** @todo This test is incomplete. */
        $this->sendWelcomeMessageJob->handle($userService);
    }

    public function testGetUser(): void
    {
        $expected = Mockery::mock(User::class);
        $property = (new ReflectionClass(SendWelcomeMessageJob::class))
            ->getProperty('user');
        $property->setValue($this->sendWelcomeMessageJob, $expected);
        self::assertSame($expected, $this->sendWelcomeMessageJob->getUser());
    }

    public function testSetUser(): void
    {
        $expected = Mockery::mock(User::class);
        $property = (new ReflectionClass(SendWelcomeMessageJob::class))
            ->getProperty('user');
        $this->sendWelcomeMessageJob->setUser($expected);
        self::assertSame($expected, $property->getValue($this->sendWelcomeMessageJob));
    }
}
